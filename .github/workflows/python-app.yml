# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: "0 5 * * *"

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 22.x ]

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
      - uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: "137.0.7151.119"
          install-chromedriver: true
      - name: Install python dependencies
        env:
          PIP_REQUIREMENTS: mitmproxy/src/python/requirements-ci.txt
        run: |
          python -m pip install --upgrade pip
          if [ -f $PIP_REQUIREMENTS ]; then pip install -r $PIP_REQUIREMENTS; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=200 --statistics
      - name: Test with pytest
        run: |
          pytest
      - name: Commit new obfuscated files
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python mitmproxy/src/python/save_obfuscated_code.py
          git config --local user.name "github-actions"
          git config --local user.email "github-actions@github.com"
          git checkout -b obfuscated-files || true
          git add .
          git commit -am "Obfuscated files" || echo "No changes to commit"
          git push -u origin obfuscated-files --force || echo "Failed to push changes"
          gh pr create --title "Obfuscated files" --body "Update obfuscated files" --base main --head obfuscated-files --merge || echo "Failed to create PR"
          gh pr merge --squash --delete-branch "obfuscated-files" || echo "Failed to enable auto-merge"

      - name: Archive output artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: output
          path: |
            output/*
